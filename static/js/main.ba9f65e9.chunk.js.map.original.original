{"version":3,"sources":["serviceWorker.ts","lib/line-strings.ts","lib/generate-tree.ts","lib/parse-input.ts","third-party/JSONCrush.js","store/persistence/query-param.ts","third-party/get-parameter-by-name.js","store/persistence/constants.ts","store/persistence/saved-state.ts","store/persistence/local-storage.ts","store/options/reducers.ts","store/source/types.ts","store/source/reducers.ts","store/index.ts","store/options/types.ts","components/DeploymentStatus.tsx","store/source/actions.ts","components/Input.tsx","store/options/actions.ts","components/Menu.tsx","components/Tree.tsx","components/App.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","LINE_STRINGS","ascii","CHILD","LAST_CHILD","DIRECTORY","EMPTY","defaultOptions","charset","trailingDirSlash","rootDot","getAsciiLine","structure","options","lines","parent","name","chunks","isLastChild","getName","current","unshift","join","substring","length","nameChunks","trailingSlashEnabled","itemHasChildren","children","itemNeedsASlash","test","shouldAddTralingSlash","map","chunk","value","addSlash","doubleSlashIndex","indexOf","beforeHash","afterHash","adjustComments","last","leadingWhitespaceAndBulletRegex","onlyWhitespaceRegex","newlineSplitterRegex","splitInput","input","filter","line","matchResult","exec","Error","targetName","replace","indentCount","JSONCrushSwap","string","forward","swapGroups","Swap","g","regex","RegExp","$1","i","getSavedStateFromQueryParam","rawSavedState","url","href","results","decodeURIComponent","getParameterByName","uncrushedState","stringParts","split","uncrushedString","splitString","character","splitArray","pop","JSONUncrush","savedState","JSON","parse","version","e","saveStateToQueryParam","baseUrl","protocol","host","pathname","crushedState","characters","c","String","fromCharCode","includes","push","crushed","replaceCharacters","replaceCharacterPos","ByteLength","encodeURI","encodeURIComponent","HasUnmatchedSurrogate","c1","charCodeAt","c2","substringCount","substringLength","substr","count","substringPos","replaceCharacter","bestSubstring","bestLengthDelta","replaceByteLength","lengthDelta","newSubstringCount","newSubstring","a","b","JSCrush","crushedString","JSONCrush","stringify","queryString","history","replaceState","getSavedState","localStorageState","localStorage","getItem","getSavedStateFromLocalStorage","saveState","setItem","saveStateToLocalStorage","initialState","fancy","trailingSlash","defaultState","source","trim","rootReducer","combineReducers","action","type","newValue","getTree","createSelector","generateTree","treeOptions","defaultsDeep","arrayToFlatten","child","flattenDeep","structures","root","path","parseInput","DeploymentStatus","props","deploymentStatus","buildMoment","moment","deployedTimestamp","format","deployedAgo","fromNow","commitSha","commitLink","className","this","React","Component","updateSource","newSource","Input","editorRef","highlight","code","Fragment","createRef","editorTextarea","querySelector","focus","setSelectionRange","ref","onValueChange","connect","dispatch","bindActionCreators","updateFancy","updateTrailingSlash","updateRootDot","Menu","copyButtonText","shareButtonText","onCopy","setState","setTimeout","onShare","onFancyChanged","event","target","checked","onTrailingSlashChanged","onRootDotChanged","role","aria-label","text","tree","defaultChecked","onChange","icons","Tree","App","networkStatus","onLine","addEventListener","rel","store","currentState","createStore","subscribe","getState","configureStore","render","document","getElementById","URL","process","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ba9f65e9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ninterface Config {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Represents an object that contains the\n * actual strings used to render the tree\n */\nexport interface LineStringSet {\n  /** The string to render immediately before non-last children */\n  CHILD: string;\n\n  /** The string to render immediately before the last child */\n  LAST_CHILD: string;\n\n  /** The string to render for parent directories */\n  DIRECTORY: string;\n\n  /** The string to render for empty space */\n  EMPTY: string;\n}\n\n/** Contains all strings for tree rendering */\nexport const LINE_STRINGS: { [charset: string]: LineStringSet } = {\n  ascii: {\n    CHILD: '|-- ',\n    LAST_CHILD: '`-- ',\n    DIRECTORY: '|   ',\n    EMPTY: '    ',\n  },\n  'utf-8': {\n    CHILD: '├── ',\n    LAST_CHILD: '└── ',\n    DIRECTORY: '│   ',\n    EMPTY: '    ',\n  },\n};\n","import { RecursiveArray } from 'lodash';\nimport defaultsDeep from 'lodash.defaultsdeep';\nimport flattenDeep from 'lodash.flattendeep';\nimport last from 'lodash.last';\nimport { FileStructure } from './FileStructure';\nimport { LINE_STRINGS } from './line-strings';\n\n/**\n * Represents all rendering options available\n * when calling `generateTree`\n */\ninterface GenerateTreeOptions {\n  /**\n   * Which set of characters to use when\n   * rendering directory lines\n   */\n  charset?: 'ascii' | 'utf-8';\n\n  /**\n   * Whether or not to append trailing slashes\n   * to directories. Items that already include a\n   * trailing slash will not have another appended.\n   */\n  trailingDirSlash?: boolean;\n\n  /**\n   * Whether or not to render a dot as the root of the tree\n   */\n  rootDot?: boolean;\n}\n\n/** The default options if no options are provided */\nconst defaultOptions: GenerateTreeOptions = {\n  charset: 'utf-8',\n  trailingDirSlash: false,\n  rootDot: true,\n};\n\n/**\n * Generates an ASCII tree diagram, given a FileStructure\n * @param structure The FileStructure object to convert into ASCII\n * @param options The rendering options\n */\nexport const generateTree = (\n  structure: FileStructure,\n  options?: GenerateTreeOptions,\n): string => {\n  const treeOptions = defaultsDeep({}, options, defaultOptions);\n\n  const asciiLine = getAsciiLine(structure, treeOptions);\n\n  const asciiChildren = structure.children.map(child => {\n    return generateTree(child, options);\n  }) as RecursiveArray<string>;\n\n  const arrayToFlatten = [asciiLine, asciiChildren];\n  const flattenedTree = flattenDeep(arrayToFlatten);\n\n  // Remove null entries. Should only occur for the very first node\n  // when `options.rootDot === false`\n  const cleanedTree = flattenedTree.filter(line => line != null).join('\\n');\n  return cleanedTree;\n};\n\n/**\n * Returns a line of ASCII that represents\n * a single FileStructure object\n * @param structure The file to render\n * @param options The rendering options\n */\nconst getAsciiLine = (\n  structure: FileStructure,\n  options: GenerateTreeOptions,\n): string | null => {\n  const lines = LINE_STRINGS[options.charset as string];\n\n  // Special case for the root element\n  if (!structure.parent) {\n    return options.rootDot ? structure.name : null;\n  }\n\n  const chunks = [\n    isLastChild(structure) ? lines.LAST_CHILD : lines.CHILD,\n    getName(structure, options),\n  ];\n\n  let current = structure.parent;\n\n  while (current && current.parent) {\n    chunks.unshift(isLastChild(current) ? lines.EMPTY : lines.DIRECTORY);\n    current = current.parent;\n  }\n\n  // Join all the chunks together to create the final line.\n  // If we're not rendering the root `.`, chop off the first 4 characters.\n  return chunks.join('').substring(options.rootDot ? 0 : lines.CHILD.length);\n};\n\n/**\n * Returns the name of a file or folder according to the\n * rules specified by the rendering rules\n * @param structure The file or folder to get the name of\n * @param options The rendering options\n */\nconst getName = (\n  structure: FileStructure,\n  options: GenerateTreeOptions,\n): string => {\n  let nameChunks = [structure.name];\n\n  const trailingSlashEnabled = options.trailingDirSlash ?? false;\n  const itemHasChildren = structure.children.length > 0;\n  const itemNeedsASlash = !/\\/\\s*$/.test(structure.name);\n  const shouldAddTralingSlash =\n    trailingSlashEnabled && itemHasChildren && itemNeedsASlash;\n\n  // Optionally append a trailing slash\n  nameChunks = nameChunks.map(chunk => {\n    const withCommentsAdjusted = adjustComments({\n      value: chunk,\n      addSlash: shouldAddTralingSlash,\n    });\n\n    return withCommentsAdjusted;\n  });\n\n  return nameChunks.join('');\n};\n\n/**\n * A utility function do determine if a file or folder\n * is the last child of its parent\n * @param structure The file or folder to test\n */\nconst isLastChild = (structure: FileStructure): boolean => {\n  return Boolean(\n    structure.parent && last(structure.parent.children) === structure,\n  );\n};\n\ninterface ProcessStringParams {\n  value: string;\n  addSlash: boolean;\n}\n\nfunction adjustComments({\n  value,\n  addSlash = false,\n}: ProcessStringParams): string {\n  // Find the index of ' # ' in the string\n  const doubleSlashIndex = value.indexOf(' # ');\n\n  // If ' # ' is not found, return the original string,\n  // potentially adding a slash at the end depending on addSlash\n  if (doubleSlashIndex === -1) {\n    return addSlash ? `${value}/` : value;\n  }\n\n  // If ' # ' is found, return a string where ' # ' is potentially\n  // preceded by a slash depending on addSlash\n  const beforeHash = value.substring(0, doubleSlashIndex);\n  const afterHash = value.substring(doubleSlashIndex);\n\n  return addSlash ? `${beforeHash}/${afterHash}` : `${beforeHash}${afterHash}`;\n}\n","import last from 'lodash.last';\nimport { FileStructure } from './FileStructure';\n\n/**\n * Matches the whitespace in front of a file name.\n * Also will match a markdown bullet point if included.\n * For example, testing against \"  - hello\" will return\n * a positive match with the first capturing group\n * with \"  - \" and a second with \"  \"\n */\nconst leadingWhitespaceAndBulletRegex = /^((\\s*)(?:-\\s)?)/;\n\n/** Matches lines that only contain whitespace */\nconst onlyWhitespaceRegex = /^\\s*$/;\n\n/** Used to split a block of text into individual lines */\nconst newlineSplitterRegex = /[^\\r\\n]+/g;\n\n/**\n * Translates a block of user-created text into\n * a nested FileStructure structure\n * @param input The plain-text input from the user\n */\nexport const parseInput = (input: string): FileStructure => {\n  const structures = splitInput(input);\n\n  const root: FileStructure = {\n    name: '.',\n    children: [],\n    indentCount: -1,\n    parent: null,\n  };\n\n  const path = [root];\n\n  for (const structure of structures) {\n    while (last(path)!.indentCount >= structure.indentCount) {\n      path.pop();\n    }\n\n    const parent = last(path) as FileStructure;\n    parent.children.push(structure);\n    structure.parent = parent;\n\n    path.push(structure);\n  }\n\n  return root;\n};\n\n/**\n * Splits a block of user-created text into\n * individual, un-nested FileStructure objects.\n * Used internally as part of `parseInput`.\n * @param input The plain-text input from the user\n */\nexport const splitInput = (input: string): FileStructure[] => {\n  let lines = input.match(newlineSplitterRegex) || [];\n\n  // filter out empty lines\n  lines = lines.filter(line => !onlyWhitespaceRegex.test(line));\n\n  return lines.map(line => {\n    const matchResult = leadingWhitespaceAndBulletRegex.exec(line);\n\n    if (!matchResult) {\n      throw new Error(\n        `Unable to execute leadingWhitespaceAndBulletRegex against string: \"${line}\"`,\n      );\n    }\n\n    const targetName = line.replace(matchResult[1], '');\n    const nameWithLink = convertHTMLLinkToMarkdown(targetName);\n    const indentCount = matchResult[2].length;\n\n    return {\n      name: nameWithLink,\n      children: [],\n      indentCount,\n      parent: null,\n    };\n  });\n};\n\nfunction convertHTMLLinkToMarkdown(s: string): string {\n  const urlRegex = /(^|\\s)(https?:\\/\\/[^\\s]+)/g;\n  return s.replace(urlRegex, '$1[Link]($2)');\n}\n","/* tslint:disable */\n/* eslint-disable */\n\n///////////////////////////////////////////////////////////////////////\n// JSONCrush by Frank Force [MIT] https://github.com/KilledByAPixel/JSONCrush\n///////////////////////////////////////////////////////////////////////\n\n\"use strict\"; // strict mode\n\nexport function JSONCrush(string)\n{\n    const maxSubstringLength = 50; // speed it up by limiting max length\n    const delimiter = '\\u0001'; // used to split parts of crushed string\n\n    const JSCrush=(string, replaceCharacters)=>\n    {\n        // JSCrush Algorithm (repleace repeated substrings with single characters)\n        let replaceCharacterPos = replaceCharacters.length;\n        let splitString = '';\n\n        const ByteLength =(string)=>encodeURI(encodeURIComponent(string)).replace(/%../g,'i').length;\n        const HasUnmatchedSurrogate =(string)=>\n        {\n            // check ends of string for unmatched surrogate pairs\n            let c1 = string.charCodeAt(0);\n            let c2 = string.charCodeAt(string.length-1);\n            return (c1 >= 0xDC00 && c1 <= 0xDFFF) || (c2 >= 0xD800 && c2 <= 0xDBFF);\n        }\n\n        // count instances of substrings\n        let substringCount = {};\n        for (let substringLength = 2; substringLength < maxSubstringLength; substringLength++)\n        for (let i = 0; i < string.length - substringLength; ++i)\n        {\n            let substring = string.substr(i, substringLength);\n\n            // don't recount if already in list\n            if (substringCount[substring])\n                continue;\n\n            // prevent breaking up unmatched surrogates\n            if (HasUnmatchedSurrogate(substring))\n                continue;\n\n            // count how many times the substring appears\n            let count = 1;\n            for (let substringPos = string.indexOf(substring, i+substringLength); substringPos >= 0; ++count)\n                substringPos = string.indexOf(substring, substringPos + substringLength);\n\n            // add to list if it appears multiple times\n            if (count > 1)\n                substringCount[substring] = count;\n        }\n\n        while(true) // loop while string can be crushed more\n        {\n            // get the next character that is not in the string\n            for (;replaceCharacterPos-- && string.includes(replaceCharacters[replaceCharacterPos]);){}\n            if (replaceCharacterPos < 0)\n                break; // ran out of replacement characters\n            let replaceCharacter = replaceCharacters[replaceCharacterPos];\n\n            // find the longest substring to replace\n            let bestSubstring;\n            let bestLengthDelta = 0;\n            let replaceByteLength = ByteLength(replaceCharacter);\n            for (let substring in substringCount)\n            {\n                // calculate change in length of string if it substring was replaced\n                let count = substringCount[substring];\n                let lengthDelta = (count-1)*ByteLength(substring) - (count+1)*replaceByteLength;\n                if (!splitString.length)\n                    lengthDelta -= ByteLength(delimiter); // include the delimeter length\n                if (lengthDelta <= 0)\n                    delete substringCount[substring]\n                else if (lengthDelta > bestLengthDelta)\n                {\n                    bestSubstring = substring\n                    bestLengthDelta = lengthDelta;\n                }\n            }\n            if (!bestSubstring)\n                break; // string can't be compressed further\n\n            // create new string with the split character\n            string = string.split(bestSubstring).join(replaceCharacter) + replaceCharacter + bestSubstring;\n            splitString = replaceCharacter + splitString;\n\n            // update substring count list after the replacement\n            let newSubstringCount = {};\n            for (let substring in substringCount)\n            {\n                // make a new substring with the replacement\n                let newSubstring = substring.split(bestSubstring).join(replaceCharacter);\n\n                // count how many times the new substring appears\n                let count = 0;\n                for (let i = string.indexOf(newSubstring); i >= 0; ++count)\n                    i = string.indexOf(newSubstring, i + newSubstring.length);\n\n                // add to list if it appears multiple times\n                if (count > 1)\n                    newSubstringCount[newSubstring] = count;\n\n            }\n            substringCount = newSubstringCount;\n        }\n\n        return {a:string, b:splitString};\n    }\n\n    // create a string of replacement characters\n    let characters = [];\n\n    // pick from extended set last\n    for (let i=255; i>32; --i)\n    {\n        let c = String.fromCharCode(i);\n        if (c!='\\\\' && !characters.includes(c))\n            characters.push(c);\n    }\n\n    // prefer replacing with characters that will not be escaped by encodeURIComponent\n    const unescapedCharacters = `-_.!~*'()`;\n    for (let i=127; --i;)\n    {\n        if\n        (\n            (i>=48 && i<=57) || // 0-9\n            (i>=65 && i<=90) || // A-Z\n            (i>=97 && i<=122)|| // a-z\n            unescapedCharacters.includes(String.fromCharCode(i))\n        )\n            characters.push(String.fromCharCode(i));\n    }\n\n    // remove delimiter if it is found in the string\n    string = string.replace(new RegExp(delimiter,'g'));\n\n    // swap out common json characters\n    string = JSONCrushSwap(string);\n\n    // crush with JS crush\n    const crushed = JSCrush(string, characters);\n\n    // insert delimiter between JSCrush parts\n    let crushedString = crushed.a;\n    if (crushed.b.length)\n        crushedString += delimiter + crushed.b;\n\n    // encode URI\n    return encodeURIComponent(crushedString);\n}\n\nexport function JSONUncrush(string)\n{\n    // string must be a decoded URI component, searchParams.get() does this automatically\n\n    // unsplit the string using the delimiter\n    const stringParts = string.split('\\u0001');\n\n    // JSUncrush algorithm\n    let uncrushedString = stringParts[0];\n    if (stringParts.length > 1)\n    {\n        let splitString = stringParts[1];\n        for (let character of splitString)\n        {\n            // split the string using the current splitCharacter\n            let splitArray = uncrushedString.split(character);\n\n            // rejoin the string with the last element from the split\n            uncrushedString = splitArray.join(splitArray.pop());\n        }\n    }\n\n    // unswap the json characters in reverse direction\n    return JSONCrushSwap(uncrushedString, 0);\n}\n\nexport function JSONCrushSwap(string, forward=1)\n{\n    // swap out characters for lesser used ones that wont get escaped\n    const swapGroups =\n    [\n        ['\"', \"'\"],\n        [\"':\", \"!\"],\n        [\",'\", \"~\"],\n        ['}', \")\", '\\\\', '\\\\'],\n        ['{', \"(\", '\\\\', '\\\\'],\n    ];\n\n    const Swap=(string, g)=>\n    {\n        let regex = new RegExp(`${(g[2]?g[2]:'')+g[0]}|${(g[3]?g[3]:'')+g[1]}`,'g');\n        return string.replace(regex, $1 => ($1 === g[0] ? g[1] : g[0]));\n    }\n\n    // need to be able to swap characters in reverse direction for uncrush\n    if (forward)\n        for (let i = 0; i < swapGroups.length; ++i)\n            string = Swap(string, swapGroups[i]);\n    else\n        for (let i = swapGroups.length; i--;)\n            string = Swap(string, swapGroups[i]);\n\n    return string;\n}\n","import { AppState } from '..';\nimport { getParameterByName } from '../../third-party/get-parameter-by-name';\nimport { JSONCrush, JSONUncrush } from '../../third-party/JSONCrush';\nimport { AppStatePlusVersion } from './AppStatePlusVersion';\nimport { CURRENT_SAVED_STATE_SCHEMA_VERSION, QUERY_KEY } from './constants';\n\n/**\n * Retrieves the most recent saved state from the query param.\n * If unsuccessful, returns `undefined`.\n */\nexport function getSavedStateFromQueryParam(): AppStatePlusVersion | undefined {\n  const rawSavedState = getParameterByName(QUERY_KEY);\n\n  if (!rawSavedState) {\n    return undefined;\n  }\n\n  try {\n    const uncrushedState = JSONUncrush(rawSavedState);\n    const savedState = JSON.parse(uncrushedState) as AppStatePlusVersion;\n    if (savedState.version !== CURRENT_SAVED_STATE_SCHEMA_VERSION) {\n      return undefined;\n    }\n\n    delete savedState.version;\n\n    return savedState;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * Updates the query param with the provided state\n * @param state The state to save\n */\nexport const saveStateToQueryParam = (state: AppState): void => {\n  const baseUrl = `${window.location.protocol}//${window.location.host}${window.location.pathname}`;\n  const crushedState = JSONCrush(\n    JSON.stringify({ ...state, version: CURRENT_SAVED_STATE_SCHEMA_VERSION }),\n  );\n  const queryString = `${QUERY_KEY}=${crushedState}`;\n  window.history.replaceState(state, '', `${baseUrl}?${queryString}`);\n};\n","/* tslint:disable */\n/* eslint-disable */\n\n/** From https://stackoverflow.com/a/901144/1063392 */\nexport function getParameterByName(name, url) {\n  if (!url) url = window.location.href;\n  name = name.replace(/[\\[\\]]/g, '\\\\$&');\n  var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),\n      results = regex.exec(url);\n  if (!results) return null;\n  if (!results[2]) return '';\n  return decodeURIComponent(results[2].replace(/\\+/g, ' '));\n}\n","/** The name of the local storage key to use when saving the current state */\nexport const LS_KEY = 'SAVED_STATE';\n\n/** The key of the query string parameter to use when saving the current state */\nexport const QUERY_KEY = 's';\n\n/**\n * The current schema version of the state.\n * Useful to avoid issues when updating the schema\n * in a future version of tree.nathanfriend.io.\n */\nexport const CURRENT_SAVED_STATE_SCHEMA_VERSION = '1';\n","import { AppState } from '../index';\nimport { AppStatePlusVersion } from './AppStatePlusVersion';\nimport {\n  getSavedStateFromLocalStorage,\n  saveStateToLocalStorage,\n} from './local-storage';\nimport {\n  getSavedStateFromQueryParam,\n  saveStateToQueryParam,\n} from './query-param';\n\n/**\n * Retrieves the most recent saved state\n * from localStorage or the query param\n * If unsuccessful (or no saved state found), returns undefined\n */\nexport function getSavedState(): AppStatePlusVersion | undefined {\n  const localStorageState = getSavedStateFromLocalStorage();\n  const queryParamState = getSavedStateFromQueryParam();\n\n  // State in the query param takes precedence over localStorage\n  return queryParamState || localStorageState;\n}\n\n/**\n * Saves the provided state to localStorage or the query param\n * @param state The state to save\n */\nexport const saveState = (state: AppState): void => {\n  saveStateToQueryParam(state);\n  saveStateToLocalStorage(state);\n};\n","import { AppState } from '../index';\nimport { AppStatePlusVersion } from './AppStatePlusVersion';\nimport { CURRENT_SAVED_STATE_SCHEMA_VERSION, LS_KEY } from './constants';\n\n/**\n * Retrieves the most recent saved state from localStorage.\n * If unsuccessful, returns `undefined`.\n */\nexport function getSavedStateFromLocalStorage():\n  | AppStatePlusVersion\n  | undefined {\n  const rawSavedState = localStorage.getItem(LS_KEY);\n\n  if (!rawSavedState) {\n    return undefined;\n  }\n\n  try {\n    const savedState = JSON.parse(rawSavedState) as AppStatePlusVersion;\n    if (savedState.version !== CURRENT_SAVED_STATE_SCHEMA_VERSION) {\n      return undefined;\n    }\n\n    delete savedState.version;\n\n    return savedState;\n  } catch (e) {\n    return undefined;\n  }\n}\n\n/**\n * Saves the provided state to localStorage\n * @param state The state to save\n */\nexport const saveStateToLocalStorage = (state: AppState): void => {\n  localStorage.setItem(\n    LS_KEY,\n    JSON.stringify({ ...state, version: CURRENT_SAVED_STATE_SCHEMA_VERSION }),\n  );\n};\n","import { getSavedState } from '../persistence/saved-state';\nimport {\n  OptionActionTypes,\n  OptionsState,\n  UPDATE_FANCY,\n  UPDATE_ROOT_DOT,\n  UPDATE_TRAILING_SLASH,\n} from './types';\n\nconst defaultState: OptionsState = {\n  fancy: true,\n  trailingSlash: true,\n  rootDot: true,\n};\n\nconst savedState = getSavedState();\n\nconst initialState = savedState ? savedState.options : defaultState;\n\nexport function optionsReducer(\n  state = initialState,\n  action: OptionActionTypes,\n): OptionsState {\n  switch (action.type) {\n    case UPDATE_FANCY:\n      return {\n        ...state,\n        fancy: action.newValue,\n      };\n    case UPDATE_TRAILING_SLASH:\n      return {\n        ...state,\n        trailingSlash: action.newValue,\n      };\n    case UPDATE_ROOT_DOT:\n      return {\n        ...state,\n        rootDot: action.newValue,\n      };\n    default:\n      return state;\n  }\n}\n","export interface SourceState {\n  source: string;\n}\n\nexport const UPDATE_SOURCE = 'UPDATE_SOURCE';\n\ninterface UpdateSourceAction {\n  type: typeof UPDATE_SOURCE;\n  source: string;\n}\n\nexport type SourceActionTypes = UpdateSourceAction;\n","import { getSavedState } from '../persistence/saved-state';\nimport { SourceActionTypes, SourceState, UPDATE_SOURCE } from './types';\n\nconst source = `\nEdit me to generate\n  a\n    nice\n      tree\n        diagram!\n        :)\n  Use indentation\n    to indicate\n      file\n      and\n      folder\n      nesting.\n    - You can even\n      - use\n        - markdown\n        - bullets!\n\n`.trim();\n\nconst defaultState: SourceState = {\n  source,\n};\n\nconst savedState = getSavedState();\n\nconst initialState = savedState ? savedState.source : defaultState;\n\nexport function sourceReducer(\n  state = initialState,\n  action: SourceActionTypes,\n): SourceState {\n  switch (action.type) {\n    case UPDATE_SOURCE:\n      return {\n        ...state,\n        source: action.source,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers, createStore } from 'redux';\nimport { createSelector } from 'reselect';\nimport { generateTree } from '../lib/generate-tree';\nimport { parseInput } from '../lib/parse-input';\nimport { optionsReducer } from './options/reducers';\nimport { OptionsState } from './options/types';\nimport { saveState } from './persistence/saved-state';\nimport { sourceReducer } from './source/reducers';\nimport { SourceState } from './source/types';\n\nconst rootReducer = combineReducers({\n  options: optionsReducer,\n  source: sourceReducer,\n});\n\nexport interface AppState {\n  options: OptionsState;\n  source: SourceState;\n}\n\nconst getSource = (state: AppState) => state.source.source;\n\nconst getOptions = (state: AppState) => state.options;\n\nexport const getTree = createSelector(\n  [getSource, getOptions],\n  (source, options) => {\n    const parsedInput = parseInput(source);\n\n    const generatedTree = generateTree(parsedInput, {\n      charset: options.fancy ? 'utf-8' : 'ascii',\n      trailingDirSlash: options.trailingSlash,\n      rootDot: options.rootDot,\n    });\n\n    return generatedTree;\n  },\n);\n\nexport const configureStore = () => {\n  const store = createStore(rootReducer);\n\n  let currentState: AppState;\n\n  function onStateUpdated() {\n    const previousState = currentState;\n    currentState = store.getState();\n\n    if (previousState !== currentState) {\n      saveState(currentState);\n    }\n  }\n\n  store.subscribe(onStateUpdated);\n\n  return store;\n};\n","export interface OptionsState {\n  fancy: boolean;\n  trailingSlash: boolean;\n  rootDot: boolean;\n}\n\nexport const UPDATE_FANCY = 'UPDATE_FANCY';\nexport const UPDATE_TRAILING_SLASH = 'UPDATE_TRAILING_SLASH';\nexport const UPDATE_ROOT_DOT = 'UPDATE_ROOT_DOT';\n\ninterface UpdateFancyAction {\n  type: typeof UPDATE_FANCY;\n  newValue: boolean;\n}\n\ninterface UpdateTrailingSlashAction {\n  type: typeof UPDATE_TRAILING_SLASH;\n  newValue: boolean;\n}\n\ninterface UpdateRootDotAction {\n  type: typeof UPDATE_ROOT_DOT;\n  newValue: boolean;\n}\n\nexport type OptionActionTypes =\n  | UpdateFancyAction\n  | UpdateTrailingSlashAction\n  | UpdateRootDotAction;\n","import moment from 'moment';\nimport React from 'react';\n\ninterface DeploymentStatusState {\n  deploymentStatus: JSX.Element | string;\n}\n\ninterface DeploymentStatusProps\n  extends React.HtmlHTMLAttributes<HTMLSpanElement> {}\n\nexport class DeploymentStatus extends React.Component<\n  DeploymentStatusProps,\n  DeploymentStatusState\n> {\n  state: DeploymentStatusState = {\n    deploymentStatus: '',\n  };\n\n  constructor(props: DeploymentStatusProps) {\n    super(props);\n\n    const formatString = 'Y/MM/DD \\\\a\\\\t HH:mm:ss ZZ';\n\n    if (process.env.NODE_ENV === 'production') {\n      const buildMoment = moment('2023-05-16T19:28:17Z');\n      const deployedTimestamp = buildMoment.format(formatString);\n      const deployedAgo = buildMoment.fromNow();\n      const commitSha = '6262510';\n      const commitLink = `%%%CI_PROJECT_URL%%%/commit/${commitSha}`;\n\n      this.state.deploymentStatus = (\n        <span>\n          Last deployed on {deployedTimestamp} ({deployedAgo}) for commit{' '}\n          <a className=\"hide-offline\" href={commitLink}>\n            {commitSha}\n          </a>\n          <b className=\"hide-online\">{commitSha}</b>\n        </span>\n      );\n    } else {\n      this.state.deploymentStatus = `Running locally. The current date is ${moment().format(\n        formatString,\n      )}`;\n    }\n  }\n\n  render() {\n    return this.state.deploymentStatus;\n  }\n}\n","import { UPDATE_SOURCE } from './types';\n\nexport function updateSource(newSource: string) {\n  return {\n    type: UPDATE_SOURCE,\n    source: newSource,\n  };\n}\n","import React, { createRef, RefObject } from 'react';\nimport { connect } from 'react-redux';\nimport Editor from 'react-simple-code-editor';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { updateSource } from '../store/source/actions';\nimport { SourceState } from '../store/source/types';\nimport './Input.scss';\n\ninterface InputProps extends React.HtmlHTMLAttributes<HTMLDivElement> {\n  source: string;\n  updateSource: typeof updateSource;\n}\n\nexport class Input extends React.Component<InputProps> {\n  editorRef: RefObject<HTMLDivElement>;\n\n  constructor(props: Readonly<InputProps>) {\n    super(props);\n    this.editorRef = createRef();\n  }\n\n  componentDidMount() {\n    // Ideally, it would be possible to just call\n    // a .focus() method on the Editor instance instead:\n    // https://github.com/satya164/react-simple-code-editor/issues/25\n    if (this.editorRef.current) {\n      const editorTextarea = this.editorRef.current.querySelector('textarea');\n      if (editorTextarea) {\n        // focus the code editor\n        editorTextarea.focus();\n\n        // move the cursor to the end\n        editorTextarea.setSelectionRange(\n          editorTextarea.value.length,\n          editorTextarea.value.length,\n        );\n      }\n    }\n  }\n\n  /**\n   * Applies no syntax highlighting.\n   * Required for TypeScript compilation.\n   */\n  highlight = (code: string) => <React.Fragment>{code}</React.Fragment>;\n\n  render() {\n    return (\n      <div\n        ref={this.editorRef}\n        className={`input p-2 d-flex rounded-sm ${this.props.className}`}\n      >\n        <Editor\n          className=\"flex-grow-1\"\n          value={this.props.source}\n          onValueChange={this.props.updateSource}\n          highlight={this.highlight}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ source }: { source: SourceState }) => ({\n  source: source.source,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators({ updateSource }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Input);\n","import { UPDATE_FANCY, UPDATE_TRAILING_SLASH, UPDATE_ROOT_DOT } from './types';\n\nexport function updateFancy(newValue: boolean) {\n  return {\n    type: UPDATE_FANCY,\n    newValue,\n  };\n}\n\nexport function updateTrailingSlash(newValue: boolean) {\n  return {\n    type: UPDATE_TRAILING_SLASH,\n    newValue,\n  };\n}\n\nexport function updateRootDot(newValue: boolean) {\n  return {\n    type: UPDATE_ROOT_DOT,\n    newValue,\n  };\n}\n","import React from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport { connect } from 'react-redux';\nimport Toggle from 'react-toggle';\nimport { bindActionCreators, Dispatch } from 'redux';\nimport { AppState, getTree } from '../store';\nimport {\n  updateFancy,\n  updateTrailingSlash,\n  updateRootDot,\n} from '../store/options/actions';\nimport './Menu.scss';\n\nconst COPY = 'Copy';\nconst SHARE = 'Share';\nconst COPIED = 'Copied!';\nconst URL_COPIED = 'URL copied!';\nconst BUTTON_TEXT_TIMEOUT = 1200;\n\ninterface MenuState {\n  copyButtonText: string;\n  shareButtonText: string;\n}\n\ninterface MenuProps extends React.HtmlHTMLAttributes<HTMLDivElement> {\n  tree: string;\n  fancy: boolean;\n  trailingSlash: boolean;\n  rootDot: boolean;\n  updateFancy: (newValue: boolean) => void;\n  updateTrailingSlash: (newValue: boolean) => void;\n  updateRootDot: (newValue: boolean) => void;\n}\n\nexport class Menu extends React.Component<MenuProps, MenuState> {\n  state: MenuState = {\n    copyButtonText: COPY,\n    shareButtonText: SHARE,\n  };\n\n  onCopy = () => {\n    this.setState({ copyButtonText: COPIED });\n    setTimeout(() => {\n      this.setState({ copyButtonText: COPY });\n    }, BUTTON_TEXT_TIMEOUT);\n  };\n\n  onShare = () => {\n    this.setState({ shareButtonText: URL_COPIED });\n    setTimeout(() => {\n      this.setState({ shareButtonText: SHARE });\n    }, BUTTON_TEXT_TIMEOUT);\n  };\n\n  onFancyChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.updateFancy(event.target.checked);\n  };\n\n  onTrailingSlashChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.updateTrailingSlash(event.target.checked);\n  };\n\n  onRootDotChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.updateRootDot(event.target.checked);\n  };\n\n  render() {\n    // 'd-flex' class is applied by parent to allow for responsive behavior\n    return (\n      <div\n        className={`menu align-items-center ${this.props.className} flex-column flex-sm-row`}\n      >\n        <div\n          className=\"btn-group mr-0 mr-sm-4 align-self-stretch align-self-md-center\"\n          role=\"group\"\n          aria-label=\"Copy and share buttons\"\n        >\n          <CopyToClipboard text={this.props.tree} onCopy={this.onCopy}>\n            <button className=\"btn btn-success copy-button py-3 py-sm-0\">\n              <b>{this.state.copyButtonText}</b>\n            </button>\n          </CopyToClipboard>\n\n          <CopyToClipboard text={window.location.href} onCopy={this.onShare}>\n            <button className=\"btn btn-secondary share-button\">\n              {this.state.shareButtonText}\n            </button>\n          </CopyToClipboard>\n        </div>\n\n        <div className=\"d-flex align-items-center flex-wrap mt-4 mt-sm-0\">\n          <label className=\"d-flex align-items-center my-1 mr-3\">\n            <Toggle\n              className=\"mr-1 options-toggle\"\n              defaultChecked={this.props.fancy}\n              onChange={this.onFancyChanged}\n              icons={false}\n            />\n            <span className=\"no-wrap\">Fancy</span>\n          </label>\n\n          <label className=\"d-flex align-items-center my-1 mr-3\">\n            <Toggle\n              className=\"mr-1 options-toggle\"\n              defaultChecked={this.props.trailingSlash}\n              onChange={this.onTrailingSlashChanged}\n              icons={false}\n            />\n            <span className=\"no-wrap\">Trailing /</span>\n          </label>\n\n          <label className=\"d-flex align-items-center my-1\">\n            <Toggle\n              className=\"mr-1 options-toggle\"\n              defaultChecked={this.props.rootDot}\n              onChange={this.onRootDotChanged}\n              icons={false}\n            />\n            <span className=\"no-wrap\">Root .</span>\n          </label>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  tree: getTree(state),\n  fancy: state.options.fancy,\n  trailingSlash: state.options.trailingSlash,\n  rootDot: state.options.rootDot,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n  bindActionCreators(\n    { updateFancy, updateTrailingSlash, updateRootDot },\n    dispatch,\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Menu);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { AppState, getTree } from '../store';\nimport './Tree.scss';\n\ninterface TreeProps extends React.HtmlHTMLAttributes<HTMLDivElement> {\n  tree: string;\n}\n\nexport class Tree extends React.Component<TreeProps> {\n  render() {\n    return (\n      <div className={`tree p-2 rounded-sm ${this.props.className}`}>\n        {this.props.tree}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  tree: getTree(state),\n});\n\nexport default connect(mapStateToProps)(Tree);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport './App.scss';\nimport { DeploymentStatus } from './DeploymentStatus';\nimport Input from './Input';\nimport Menu from './Menu';\nimport Tree from './Tree';\n\ninterface AppState {\n  networkStatus: 'offline' | 'online';\n}\n\nexport class App extends React.Component<void, AppState> {\n  state: AppState = {\n    networkStatus: window.navigator.onLine ? 'online' : 'offline',\n  };\n\n  componentDidMount() {\n    window.addEventListener('offline', () =>\n      this.setState({ networkStatus: 'offline' }),\n    );\n    window.addEventListener('online', () =>\n      this.setState({ networkStatus: 'online' }),\n    );\n  }\n\n  render() {\n    return (\n      <div\n        className={`app px-3 pt-2 d-flex w-100 min-vh-100 position-absolute flex-column ${this.state.networkStatus}`}\n      >\n        <div className=\"flex-grow-0 flex-shrink-0 d-flex align-items-center mb-2\">\n          <div className=\"flex-even d-flex align-items-center flex-column flex-sm-row\">\n            <h1 className=\"mr-4 mb-0\">tree.nathanfriend.io</h1>\n            <a\n              className=\"my-2 my-sm-0 hide-offline\"\n              href=\"https://gitlab.com/nfriend/tree-online#what-is-this\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              What is this?\n            </a>\n          </div>\n          <Menu className=\"flex-even pl-4 d-none d-lg-flex\" />\n        </div>\n        <div className=\"flex-grow-1 d-flex flex-column flex-lg-row\">\n          <div className=\"flex-even d-flex mr-0 mr-lg-2\">\n            <Input className=\"flex-grow-1\" />\n          </div>\n          <div className=\"flex-even\">\n            <Tree className=\"flex-grow-1\" />\n          </div>\n          <Menu className=\"d-flex d-lg-none pt-2 pb-5\" />\n        </div>\n        <div className=\"flex-grow-0 flex-shrink-0 d-flex align-items-center align-items-sm-start mt-2 flex-column flex-md-row\">\n          <p className=\"text-muted text-center text-sm-left mb-2 pr-0 pr-sm-4 mr-auto\">\n            <DeploymentStatus />\n          </p>\n          <div className=\"d-flex flex-column flex-sm-row align-items-center align-items-sm-start mb-2 mt-md-0\">\n            <a\n              className=\"pr-0 pr-sm-4 view-source-on-github-link no-wrap hide-offline\"\n              href=\"https://github.com/mortenbroesby/tree-online\"\n            >\n              View the source on Github\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect()(App);\n","import './polyfills.ts';\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport { configureStore } from './store';\n\nimport './third-party/JSONCrush';\n\nimport 'react-toggle/style.css';\nimport './index.scss';\n\nimport App from './components/App';\n\nconst store = configureStore();\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}